/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author vanes
 */

import java.awt.Color;
import javax.swing.*;
import javax.swing.ImageIcon;
import java.util.*;
import java.lang.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JDialog;
import java.awt.Component;
import java.awt.Font;


public class FrmMastermind extends javax.swing.JFrame {
    
    /**
     * Creates new form FrmMastermind
     */
    
    public static int[] computer_pick = new int[4];
    public static int[][] player_pick = new int[9][4];
    public static int[][] results = new int[10][4];
    public static int current_round = 0;
    public static int current_bound = 160;
    
    public FrmMastermind() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    public void closeForm(){
        this.getContentPane().setVisible(false);
        this.dispose();
    }
    
    /**
     * @param args the command line arguments
     */
    
    public static String colortxt(int pick) {
        String[] color_opt = {"blue", "red", "green", "yellow", "pink", "white", "black", "grey"};
//        Color[] color = {Color.blue, Color.red, Color.green, Color.yellow, Color.pink, Color.white, Color.black};
        return color_opt[pick];
    }
    
    public static Color color(int pick) {
        Color[] color = {Color.blue, Color.red, Color.green, Color.yellow, Color.pink, Color.white, Color.black, Color.gray};
        return color[pick];
    }
    
    public static int randompick() {
        int pick = 0;
        // gray is control color
        pick = (int)Math.round(Math.random() * 6);
        return pick;
    }
    
    public static void pincolorpick(JFrame form, JButton original, int round, int[][] player) {
        // Get pin color selection
        JDialog pick_color = new JDialog(form);
        pick_color.setSize(320,200);
        pick_color.setLocationRelativeTo(form);
        pick_color.setLayout(null);
        pick_color.setTitle("Pin color selection");
        pick_color.setVisible(true);
        pick_color.setBackground(Color.black);
        pick_color.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        JLabel lblinstruct = new JLabel("lbl" + round + 0, JLabel.CENTER);
        lblinstruct.setText("Select your pin color.");
        lblinstruct.setBounds(50, 20, 200, 30);
        lblinstruct.setFont(new Font("Arial", Font.BOLD, 18));
        pick_color.add(lblinstruct);
        for (int i = 0; i < 7; i++) {
            JButton button = new JButton("color"+i);
            button.setVisible(true);
            button.setName(" " + i); 
            button.setBounds(50 + (i*30), 80, 30, 30);
            button.setBackground(color(i));
            button.setText(button.getName());
            button.setText(" " + i);
            pick_color.add(button);
            button.addActionListener(new ActionListener() { 
                @Override
                public void actionPerformed(ActionEvent e) {
                    
                    // call modal form
                    Object source =  e.getSource();
                    JButton current_button = (JButton) source;
                    JButton origin_button = (JButton) original;
                    String btnText = current_button.getName();
                    int button_id = Integer.parseInt(origin_button.getText().substring(origin_button.getText().lastIndexOf("hole")+5));
                    Color current_backgroud = origin_button.getBackground();
//                    System.out.println(origin_button.getName());
                    System.out.println("Button id: " + button_id);
//                    System.out.println(origin_button.getText().toString().length());
//                    player_pick[round][button_id] = Integer.parseInt(btnText.trim());                        
                    if (current_backgroud == Color.gray) {
                        if (source instanceof JButton) {
                            System.out.println("You click color : " + Integer.parseInt(btnText.trim()));
                            origin_button.setBackground(color(Integer.parseInt(btnText.trim())));
                            player[round][button_id] = Integer.parseInt(btnText.trim());  
//                            ((JButton) original).setEnabled(false);
                        }
                        else {
                            origin_button.removeActionListener(this);
                            current_button.removeActionListener(this);
                            }
                    pick_color.dispose();
                }
                }
            });
            }
        }
    
    
    public static void computergreeting(JFrame form) {
        // Get pin color selection
        JDialog comp_hello = new JDialog(form);
        comp_hello.setSize(600,400);
        comp_hello.setLocationRelativeTo(form);
        comp_hello.setLayout(null);
        comp_hello.setTitle("Computer Code creation");
        comp_hello.setVisible(true);
        comp_hello.setBackground(Color.black);
        comp_hello.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        JLabel lblinstruct = new JLabel("compgreet", JLabel.CENTER);
        lblinstruct.setText("Our friendly computer selected his secret code!!!");
        lblinstruct.setBounds(50, 20, 500, 100);
        lblinstruct.setFont(new Font("Arial", Font.BOLD, 18));
        comp_hello.add(lblinstruct);
        JButton button = new JButton("ready");
        button.setVisible(true);
        button.setBounds(150, 150, 300, 100);
//            button.setBackground(color(i));
        button.setText(button.getName());
        button.setText("Are you ready??");
        button.setFont(new Font("Arial", Font.BOLD, 28));
        comp_hello.add(button);
        button.addActionListener(new ActionListener() { 
                @Override
                public void actionPerformed(ActionEvent e) {
                    comp_hello.dispose();
                    }
        });
           
//        comp_hello.dispose();
            }
    
    public static Boolean check_pins_selected(int round, int[][] player_selected) {
        for (int i = 0; i < player_selected[round].length; i++) {
//                System.out.println("Round " + player_selected[round] + " Value: " + player_selected[round][i]);
                if (player_selected[round][i] == 7){
                    return false;
                }
        }
        return true;
    }
    
    public static void print_2dim_array(int[][] arr) {
        for (int i[]: arr) {
            System.out.println("Round " + arr + " : " + i); 
            for (int j: i) {
                System.out.println("Array Items: " + j); 
            }
        }
    }
    
    public static void print_array(int[] arr) {
        for (int i: arr) {
            System.out.println("Value for " + i + " : " + arr[i]); 
            }
        }
    
    public static void set_pin_holes(int round, JFrame form, int pins, int[][] player, int bound){
        JLabel lblplayer = new JLabel("lbl" + round + 0, JLabel.CENTER);
        lblplayer.setText("Player");
        lblplayer.setBounds(bound, 45, 60, 30);
        lblplayer.setFont(new Font("Arial", Font.BOLD, 18));
        JLabel lbl = new JLabel("lbl" + round + 1, JLabel.CENTER);
        lbl.setText("Round "+ round);
        lbl.setBounds(bound, 62, 60, 30);
        lbl.setFont(new Font("Arial", Font.BOLD, 14));
        form.add(lbl);
        form.add(lblplayer);
        for (int p = 0; p < pins; p++) {
            JButton button = new JButton("hole"+ round + p);
            button.setVisible(true);
            button.setBounds(bound + 20, 120 + (p*40), 30, 30);
            button.setBackground(Color.gray);
            form.add(button);
            button.addActionListener(new ActionListener() { 
                @Override
                public void actionPerformed(ActionEvent e) {
                    // call modal form
                    Object source =  e.getSource();
                    JButton current_button = (JButton) source;
                    Color current_backgroud = current_button.getBackground();
                    if (current_backgroud == Color.gray) {
                        pincolorpick(form, (JButton)e.getSource(), round, player);
                        } else {
                                System.out.println("Color already selected, no changes allowed!");
                            }
                        }   
                    }
                ); //link event 
            }
        form.revalidate();
        
    }
    
    public static void add_check_btn(JFrame form, int round, int bound) {
            JButton button = new JButton("check"+ round );
            button.setVisible(true);
            button.setBounds(bound, 370, 70, 30);
            button.setText("Check ");
            button.setBackground(Color.white);
            form.add(button);
            button.addActionListener(new ActionListener() { 
                @Override
                public void actionPerformed(ActionEvent e) {
                    Object source =  e.getSource();
                    JButton current_button = (JButton) source;
//                    int button_id = Integer.parseInt(current_button.getText().substring(current_button.getName().lastIndexOf("check")+4));
                    if (check_pins_selected(current_round, player_pick) == true) {
                        int[] result_pins = check_results(computer_pick, player_pick, round);
                        set_results_pins(form, bound, result_pins[0], result_pins[1]);
                        if (result_pins[1] >= 4) {
                            computer_pick_display(form, computer_pick);
                            form.revalidate();
//                            reveal_computer_code(form);
//                            System.exit(0);
//                            return;
                        }
                        current_round++;
                        current_bound += 90;
                        set_pin_holes(current_round, form, computer_pick.length, player_pick, current_bound);
                        add_check_btn(form, current_round, current_bound);
                        form.revalidate();
                        System.out.println("Time to check results! Round" + round);
                    }   

                        }   
                    }
                ); //link event
    }
    
    public static void reveal_computer_code(JFrame form) {
        
        Component[] component = form.getComponents();
        for (int i=0; i <component.length; i++) 
        {
            if (component[i] instanceof JButton) 
            {
                JButton button = (JButton)component[i];
                if (button.getText().indexOf("Comp")>0) 
                {
                    button.setEnabled(true);
                    button.setVisible(true);
                }
            }
        }
    }
    
    public static int[] check_results(int[] computer, int[][] player, int round) {
            // Array of whites and blacks
            int[] white_black_results = new int[2];
            String match = "";
            int white = 0;
            int black = 0;
            for (int i = 0; i < computer.length; i++) {
                for (int p = 0; p < player[round].length; p++) {
                    if (computer[i] == player[round][p] && (i==p)) {
                                black++;
                                match += computer[i]+","+player[round][p];
                        }
                    if (computer[i] == player[round][p] && 
                            match.indexOf(computer[i]+","+player[round][p]) < 0 
                            && !(i==p)) {
                            match += computer[i]+","+player[round][p];
                        white++;}
                        }
                }
            white_black_results[0] = white;
            white_black_results[1] = black;
            return white_black_results;
            }
    
    public static void initialize_picks(int[][] player) {
        for (int i = 0; i < player.length; i++) {
            for (int p = 0; p < player[i].length; p++) {
                player_pick[i][p] = 7;
            }
        }
    }
    
    public static void computer_pick_display(JFrame form, int[] comp_pick) {
        JLabel lblplayer = new JLabel("compres", JLabel.CENTER);
        lblplayer.setText("Computer");
        lblplayer.setBounds(30, 45, 100, 30);
        lblplayer.setFont(new Font("Arial", Font.BOLD, 18));
        JLabel lbl = new JLabel("compcode", JLabel.CENTER);
        lbl.setText("My Code");
        lbl.setBounds(36, 68, 80, 30);
        lbl.setFont(new Font("Arial", Font.BOLD, 14));
        form.add(lbl);
        form.add(lblplayer);
        int[] Computer_Pick = new int[4];
        for (int i = 0; i < comp_pick.length; i++) {
            Computer_Pick[i] = comp_pick[i];
            System.out.println(colortxt(Computer_Pick[i]));
            JButton button = new JButton("comp"+i);
            button.setVisible(true);
//            button.setEnabled(false);
            button.setBounds(65, 120 + (i*40), 30, 30);
            button.setBackground((color(Computer_Pick[i])));
            form.add(button);
            computer_pick[i] = Computer_Pick[i];
        }
    }
    
    public static void computer_pick_nbr(int[] computer_pick) {
        for (int i = 0; i < computer_pick.length; i++) {
            computer_pick[i] = randompick();
            System.out.println(colortxt(computer_pick[i]));
            
        }
    }
    
    public static ImageIcon loadimg() {
        ImageIcon img = new ImageIcon("./top_secret.jpg");
        return img;
    }
    
    public static void set_board(JFrame form) {
        form.setTitle("My amazing Mastermind game");
        form.setSize(1400,700);
        form.setLayout(null);
        form.setVisible(true);
        form.setBackground(Color.gray);
        form.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        JLabel lblrule1 = new JLabel("Rules1", JLabel.LEFT);
        lblrule1.setText("Instructions:");
        lblrule1.setBounds(160, 480, 500, 50);
        lblrule1.setFont(new Font("Arial", Font.BOLD, 24));
        JLabel lblrule2 = new JLabel("Rules2", JLabel.LEFT);
        lblrule2.setText("1. Pick colors for your pins, and click on Check button to see if you got it!");
        lblrule2.setBounds(160, 520, 800, 50);
        lblrule2.setFont(new Font("Arial", Font.BOLD, 18));
        JLabel lblrule3 = new JLabel("Rules3", JLabel.LEFT);
        lblrule3.setText("2. Remember, black pins show that you got the color and position correct.");
        lblrule3.setBounds(160, 560, 800, 50);
        lblrule3.setFont(new Font("Arial", Font.BOLD, 18));
        JLabel lblrule4 = new JLabel("Rules3", JLabel.LEFT);
        lblrule4.setText("2. White pins shows that you got only the color correct, but not the position.");
        lblrule4.setBounds(160, 600, 800, 50);
        lblrule4.setFont(new Font("Arial", Font.BOLD, 18));
        form.add(lblrule1);
        form.add(lblrule2);
        form.add(lblrule3);
        form.add(lblrule4);
    }
    
    public static void set_no_results_pins(JFrame form, int initial_point) {
        for (int i = 0; i < computer_pick.length; i++) {
            JButton button = new JButton("pin" + current_round + i);
            button.setVisible(true);
            if (i < 2) {
                button.setBounds(initial_point, 220 + (i*20), 14, 14);
            }
            else {
                button.setBounds(initial_point + 18, 180 + (i*20), 14, 14);
            };
            button.setBackground(Color.gray);
            form.add(button);
            form.revalidate();
        }        
    }
    
    public static void set_results_pins(JFrame form, int initial_point, int white, int black) {
        int[] player_results = new int[4];
        for (int i = 0; i < player_results.length; i++) {
            JButton button = new JButton("pin" + current_round  + i);
            button.setVisible(true);
            if (i < 2) {
                button.setBounds(initial_point + 20, 290 + (i*20), 14, 14);
            }
            else {
                button.setBounds(initial_point + 38, 250 + (i*20), 14, 14);
            };
            if (white > 0) {
                button.setBackground(Color.white);
                white--;
                } 
            else if (black > 0) {
                button.setBackground(Color.black);
                black--;
                }
            else {  
                button.setBackground(Color.gray);
                }
        form.add(button);
        }        
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmMastermind.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmMastermind.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmMastermind.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmMastermind.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        initialize_picks(player_pick);
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // Game board
                JFrame form = new JFrame("FrmMAsterMind"); 
                ImageIcon img = new ImageIcon("rsz_top_secret.jpg");
                JLabel lbl = new JLabel(img);
                lbl.setBounds(current_bound, 20, 300, 300);
                lbl.setVisible(true);
                form.add(lbl);
                set_board(form);
                // Computer pick
                computer_pick_nbr(computer_pick);
                computergreeting(form);
                
                // Player round play 
//                int rounds_to_play = 10;
//                Boolean wait_user = true;
                // Full cycle
//                for (int i = 0; i < rounds_to_play; i++) {
                // First Round
                set_pin_holes(current_round, form, computer_pick.length, player_pick, current_bound);
//              set_no_results_pins(form, 90);
                add_check_btn(form, current_round, current_bound);
                form.revalidate();
//                }

//                    // Each cycle    
//                    for (int c=0; c <  i; c++) {
//                        set_pin_holes(i, form, pins_per_round, player_pick);
//                        }
//                    while (check_pins_selected(i, player_pick)) {
//                        System.out.println("Time to check results!");
//        //               wait_user = false;
//                    }    
//                }
//                print_array(computer_pick);
//                print_2dim_array(player_pick);
            }
        });
    }
}





    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
        
    



                
    
                
